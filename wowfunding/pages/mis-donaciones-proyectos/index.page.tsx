'use client'
import { GetServerSideProps, GetStaticProps, NextPage } from 'next';
import MisDonaciones from "components/layouts/mis-donaciones/mis-donaciones";
import CardsMisProyectos from "components/layouts/cards-mis-proyectos/cards-mis-proyectos";
import CardsDonacionesRecomendadas from "components/layouts/cards-donaciones-recomendadas/cards-donaciones-recomendadas";
import GeneralHeader from "components/layouts/header/general-header.component";
import GeneralFooter from "components/layouts/footer-general/general-footer.component";
import { Donaciones } from 'interfaces/donaciones.type';
import { ProyectoFinal } from 'interfaces/proyect.type';
import { getDonacionesUsuario} from 'services/donaciones/donaciones.service';
import { getProyectos, getProyectosUsuario } from 'services/proyectos/proyectos.service';
import Head from 'next/head';

interface Props {
  proyectos: ProyectoFinal[];
  proyectosUsuario: ProyectoFinal[];
  donacionesUsuario: Donaciones[];
}

const MisDonacionesProyectos: NextPage<Props> = ({ donacionesUsuario, proyectos, proyectosUsuario }: Props) => {
  return (
    <>
      <Head>
        <title>Wowfunding</title>
        <meta name="doanciones y proyectos" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <GeneralHeader />
      <MisDonaciones listaDonaciones={donacionesUsuario} listaProyectos={proyectos} />
      <CardsMisProyectos listaProyectosUsuario={proyectosUsuario} /> 
      <CardsDonacionesRecomendadas listaProyectos={proyectos} />
      <GeneralFooter />
    </>
  );
};

// export const getServerSideProps: GetServerSideProps<MisDonacionesProyectosProps> = async (context) => {
//   try {

// const localStorageUser = typeof window !== 'undefined' ? localStorage.getItem('access-confirmacion') : null;
// const usuarioLogueado: IUser = localStorageUser ? JSON.parse(localStorageUser) : null;

//Cookies, usuario id=1
// const cookieUser = context.req.cookies && context.req.cookies["access-confirmacion"];
// const usuarioLogueado: IUser = cookieUser ? JSON.parse(cookieUser) : {id:1};
//     const usuarioLogueado = {id:1};


export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  try {
    const cookies = req.cookies
    const tokenUser = cookies['access-confirmacion']
    const usuarioId = 18;
    const proyectos = await getProyectos(0, 10);
    res.setHeader('Cache-Control', 'public, s-maxage=10, stale-while-revalidate');
    const proyectosUsuario = await getProyectosUsuario(usuarioId, 0, 10);
    const donacionesUsuario = await getDonacionesUsuario(usuarioId);

    
    return {
      props: {
        proyectos: proyectos,
        proyectosUsuario: proyectosUsuario,
        donacionesUsuario: donacionesUsuario,
      },
    };
  } catch (error) {
    console.error('Error al cargar datos', error);
    return {
      props: {
        proyectos: [],
        proyectosUsuario: [],
        donacionesUsuario: [],
      },
    };
  }
};

export default MisDonacionesProyectos;


